# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: '$(rev:r)' # Format for build number (will be overridden)

# DevOps Setup: Define the following pipeline level variables in Azure DevOps build pipeline
#
# ArtifactFeedID set to your Azure DevOps Artifact (NuGet) feed
# BuildConfiguration: 'Release'
# BuildPlatform: 'Any CPU'
# PreReleaseCounterPattern: '0000000000' (in ci pipeline only)
# VersionSuffix 'ci' (or 'beta' or 'rc' or '' in production pipeline)

variables:
- name: BuildCounterPrefix # Hack to get the counter() expression to work
  value: ''
- name: BuildCounter
  value: $[counter(variables['BuildCounterPrefix'],1250)]
- name: TestTargetFrameworks
  value: 'netcoreapp2.1;netcoreapp1.0;net451'
- name: BinaryArtifactName
  value: 'testbinaries'
- name: NuGetArtifactName
  value: 'nuget'
- name: TestResultsArtifactName
  value: 'testresults'
- name: BuildDirectory # Where the build scripts and configs are
  value: '$(System.DefaultWorkingDirectory)/build'
- name: ReleaseDirectory # Build artifacts directory
  value: '$(System.DefaultWorkingDirectory)/release'
- name: PublishDirectory # Test binaries directory
  value: '$(ReleaseDirectory)/Publish'

stages:
- stage: Build_Stage
  displayName: 'Build Stage:'
  jobs:

  - job: Build
    pool:
      vmImage: 'windows-2019'

    steps:
    - powershell: |
        Import-Module "$(BuildDirectory)/psake.psm1"
        Invoke-psake $(BuildDirectory)/build.ps1 -Task Pack,Publish -properties @{backup_files='false'}
        exit !($psake.build_success)
      displayName: 'PSake Build'

    # Copy the .nupkg and .pdb files as build artifacts, which will 
    # later be used to push to the Azure Artifacts symbol server.
    - task: CopyFiles@2
      displayName: 'Copy .nupkg and .pdb Files to: /$(NuGetArtifactName)'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/*.nupkg;**/bin/$(BuildConfiguration)/**/*.pdb'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(NuGetArtifactName)'
    # Copy the .dll files of test projects as build artifacts, which will 
    # later be used to run tests.
    - task: CopyFiles@2
      displayName: 'Copy Test .dll Files to: /$(BinaryArtifactName)'
      inputs:
        SourceFolder: '$(PublishDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(BinaryArtifactName)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(BinaryArtifactName)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(BinaryArtifactName)'
        ArtifactName: '$(BinaryArtifactName)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(NuGetArtifactName)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(NuGetArtifactName)'
        ArtifactName: '$(NuGetArtifactName)'
#    - template: 'common/gitversioning-increment-and-persist-versions.yml@templates'
#      parameters:
#        versionArtifactName: '$(VersionArtifactName)'
#        packageVersionFileName: '$(PackageVersionFileName)'
#        fileVersionFileName: '$(FileVersionFileName)'
#        buildNumberFileName: '$(BuildNumberFileName)'
#
#    - template: 'class-libraries/build-pack-and-publish-libraries.yml@templates'
#      parameters:
#        artifactFeedID: '$(ArtifactFeedID)'
#        testTargetFrameworks: '$(TestTargetFrameworks)'
#        informationalVersion: '$(InformationalVersion)' # Output from gitversioning-increment-and-persist-versions.yml
#        fileVersion: '$(FileVersion)' # Output from gitversioning-increment-and-persist-versions.yml
#        assemblyVersion: '$(AssemblyVersion)' # Output from gitversioning-increment-and-persist-versions.yml
#        packageVersion: '$(PackageVersion)' # Output from gitversioning-increment-and-persist-versions.yml
#        buildConfiguration: '$(BuildConfiguration)'
#        buildPlatform: '$(BuildPlatform)'
#        nugetArtifactName: '$(NuGetArtifactName)'
#        binaryArtifactName: '$(BinaryArtifactName)'


#- stage: Test_Stage
#  displayName: 'Test Stage:'
#  jobs:
#  - job: Test
#    strategy:
#      matrix:
#        Windows:
#          osName: 'Windows'
#          imageName: 'windows-2019'
#        Linux:
#          osName: 'Linux'
#          imageName: 'ubuntu-16.04'
#        macOS:
#          osName: 'macOS'
#          imageName: 'macOS-10.14'
#    displayName: 'Test on'
#    pool:
#      vmImage: $(imageName)
#    steps:
#    - template: 'common/run-tests-on-os.yml@templates'
#      parameters:
#        osName: $(osName)
#        testTargetFrameworks: '$(TestTargetFrameworks)'
#        testResultsArtifactName: '$(TestResultsArtifactName)'